// UI/registerform.cpp
#include "registerform.h" // Đã rút gọn include
#include "./ui_registerform.h"
#include "Logger.h" // Đã rút gọn include
#include "ErrorHandler.h" // Đã rút gọn include
#include "IUserService.h" // Đã rút gọn include
#include "PasswordHasher.h" // Đã rút gọn include
#include "User.h" // Đã rút gọn include

#include <QMessageBox> // For QMessageBox

namespace ERP {
namespace UI {

RegisterForm::RegisterForm(QWidget *parent, std::shared_ptr<ERP::User::Services::IUserService> userService)
    : QWidget(parent),
      ui(new Ui::RegisterForm),
      userService_(userService) {
    ui->setupUi(this);

    if (!userService_) {
        showMessageBox("Lỗi Khởi Tạo", "Dịch vụ người dùng không khả dụng. Vui lòng liên hệ quản trị viên.", QMessageBox::Critical);
        ERP::Logger::Logger::getInstance().critical("RegisterForm: Initialized with null userService.");
        // Consider disabling registration functionality or exiting gracefully
    }
}

RegisterForm::~RegisterForm() {
    delete ui;
}

void RegisterForm::on_registerButton_clicked() {
    if (!userService_) {
        showMessageBox("Lỗi", "Dịch vụ người dùng không khả dụng.", QMessageBox::Critical);
        return;
    }

    QString username = ui->usernameLineEdit->text();
    QString password = ui->passwordLineEdit->text();
    QString confirmPassword = ui->confirmPasswordLineEdit->text();
    QString email = ui->emailLineEdit->text();
    QString firstName = ui->firstNameLineEdit->text();
    QString lastName = ui->lastNameLineEdit->text();
    QString phoneNumber = ui->phoneNumberLineEdit->text();

    if (username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
        showMessageBox("Lỗi Đăng Ký", "Vui lòng nhập tên đăng nhập, mật khẩu và xác nhận mật khẩu.", QMessageBox::Warning);
        return;
    }

    if (password != confirmPassword) {
        showMessageBox("Lỗi Đăng Ký", "Mật khẩu xác nhận không khớp.", QMessageBox::Warning);
        return;
    }

    // Basic password strength check
    if (password.length() < 8) {
        showMessageBox("Lỗi Đăng Ký", "Mật khẩu phải có ít nhất 8 ký tự.", QMessageBox::Warning);
        return;
    }

    ERP::Logger::Logger::getInstance().info("RegisterForm: Attempting registration for user: " + username.toStdString());

    ERP::User::DTO::UserDTO newUser;
    // ID will be generated by service
    newUser.username = username.toStdString();
    newUser.passwordHash = password.toStdString(); // This will be hashed by service
    // Salt will be generated by service
    newUser.email = email.isEmpty() ? std::nullopt : std::make_optional(email.toStdString());
    newUser.firstName = firstName.isEmpty() ? std::nullopt : std::make_optional(firstName.toStdString());
    newUser.lastName = lastName.isEmpty() ? std::nullopt : std::make_optional(lastName.toStdString());
    newUser.phoneNumber = phoneNumber.isEmpty() ? std::nullopt : std::make_optional(phoneNumber.toStdString());
    newUser.type = ERP::User::DTO::UserType::EMPLOYEE; // Default to EMPLOYEE for new registrations
    // This assumes a default role exists in your DB for new users,
    // or an Admin needs to assign one. For now, assign a placeholder role ID.
    newUser.roleId = "default_user_role_id"; // IMPORTANT: This needs to be a valid role ID from your DB.

    // Pass an empty userRoleIds list, as new user has no roles yet.
    // The service might check permissions based on the 'currentUserId' (e.g., if only Admin can register users).
    // For self-registration, permission check might be "allow_self_register" or handled by AuthenticationService.
    std::vector<std::string> dummyRoles = {"public_access"}; // Or leave empty

    std::optional<ERP::User::DTO::UserDTO> registeredUser =
        userService_->createUser(newUser, "system_registration", dummyRoles); // "system_registration" as currentUserId

    if (registeredUser) {
        showMessageBox("Đăng Ký Thành Công", "Tài khoản " + username + " đã được tạo thành công. Vui lòng đăng nhập.", QMessageBox::Information);
        ui->usernameLineEdit->clear();
        ui->passwordLineEdit->clear();
        ui->confirmPasswordLineEdit->clear();
        ui->emailLineEdit->clear();
        ui->firstNameLineEdit->clear();
        ui->lastNameLineEdit->clear();
        ui->phoneNumberLineEdit->clear();
        emit backToLoginRequested();
    } else {
        QString errorMessage = "Đăng ký thất bại. Vui lòng thử lại.";
        if (ERP::ErrorHandling::ErrorHandler::getLastUserMessage().has_value()) {
            errorMessage = QString::fromStdString(*ERP::ErrorHandling::ErrorHandler::getLastUserMessage());
        }
        showMessageBox("Lỗi Đăng Ký", errorMessage, QMessageBox::Critical);
    }
}

void RegisterForm::on_backToLoginButton_clicked() {
    ui->usernameLineEdit->clear();
    ui->passwordLineEdit->clear();
    ui->confirmPasswordLineEdit->clear();
    ui->emailLineEdit->clear();
    ui->firstNameLineEdit->clear();
    ui->lastNameLineEdit->clear();
    ui->phoneNumberLineEdit->clear();
    emit backToLoginRequested();
}

void RegisterForm::showMessageBox(const QString& title, const QString& message, QMessageBox::Icon icon) {
    Common::CustomMessageBox msgBox(this);
    msgBox.setWindowTitle(title);
    msgBox.setText(message);
    msgBox.setIcon(icon);
    msgBox.exec();
}

} // namespace UI
} // namespace ERP